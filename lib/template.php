<?php

/*
 * template.php - functions for loading and interpreting presto templates
 *
 * This file contains functions for reading a template that is also used
 * by the presto Markdown publishing program. It is designed to keep a PHP
 * code base visually consistent with the flat HTML generated by presto.
 *
 * It's worth noting that, if presto is directed to a different location
 * for a template than TEMPLATE below, these functions will not
 * notice the change. If you change your presto installation's template,
 * you should also update it here.
 *
 * Author: Alexander Breen (alexander.breen@gmail.com)
 */

require_once 'globals.php';

define('MASTHEAD', '<div class="apollo-logo">Apollo</div><br>');

/*
 * Associative array used to keep mappings between variables found in the
 * template file and actual values. render_page() uses this array to do
 * the actual replacement and output. Other functions like set_title() can
 * modify this array.
 */
$page_content = array();

$footer = '<a href="about.php">Apollo ' . APOLLO_VERSION . '</a>. ' .
          'Generated on ' . date('F j, Y \a\t g:i:s A') . '.';

$page_content['footer'] = $footer;

/*
 * The "body template" is another string (read from another template file)
 * that should replace the $body variable of the outer template. If this
 * variable is null, then the "body" key should be present in the array
 * given as an argument to render_page().
 */
$body_template = null;

/*
 * Opens the current template and returns the file as a string.
 * Throws an exception if the template is not readable.
 */
function get_current_template() {
    if (!is_readable(PRESTO_TEMPLATE))
        trigger_error('failed to load template file ' . PRESTO_TEMPLATE);

    return file_get_contents(PRESTO_TEMPLATE);
}

function set_title($string) {
    global $page_content;

    $page_content['title'] = $string;
}

function use_body_template($name) {
    global $body_template;

    $path = TEMPLATES_DIR . SEP . $name . '.html';

    if (!is_readable($path))
        trigger_error('failed to load body template ' . $name);

    $body_template = file_get_contents($path);
}

/*
 * Given an associative array that maps variables (e.g., "$username") in the
 * template to values, replace those variables with the specified values
 * and output the page.
 */
function render_page($vars = null) {
    global $page_content, $body_template;

    $template = get_current_template();

    if ($body_template) {
        $body_template = MASTHEAD . $body_template;
        $template = str_replace('$body', $body_template, $template);
    }

    if ($vars)
        $page_content += $vars;

    /*
     * We will check that all the variables in the actual template have been
     * assigned a value somewhere in $page_content. Otherwise, we'll stop
     * with an error.
     */
    $vars_in_template = array();
    preg_match_all('/\$[\w\d]+/', $template, $vars_in_template);
    $vars_in_template = array_unique($vars_in_template[0]);

    foreach ($page_content as $key => $val) {
        $i = array_search('$' . $key, $vars_in_template);
        if ($i === FALSE) {
            // this variable is not in the template
            continue;
        }

        $template = str_replace('$' . $key, $val, $template);

        // we replaced a variable in the template
        unset($vars_in_template[$i]);
    }

    /*
     * $vars_in_template should now contain all the variables left over.
     * We'll stop with an error if this array is not empty.
     */
    if (count($vars_in_template) !== 0)
        trigger_error('unbound template variables: ' .
                      implode(', ', $vars_in_template), E_USER_ERROR);

    print $template;
}
